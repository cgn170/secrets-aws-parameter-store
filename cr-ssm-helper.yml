
AWSTemplateFormatVersion: "2010-09-09"

Resources:
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt Role.Arn
      Runtime: python3.9
      Timeout: 420
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import signal
          import functools
          import urllib
          from time import sleep
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          def handler(event, context):
            signal.alarm((context.get_remaining_time_in_millis() // 1000) - 1)
            try:
              LOGGER.info('REQUEST RECEIVED, EVENT: %s\n CONTEXT: %s', context, event)
              ssm = boto3.client('ssm')
              props = event['ResourceProperties']
              props.pop('ServiceToken')
              splitStackArn = event['StackId'].split(':')
              region = splitStackArn[3]
              accountId = splitStackArn[4]
              stackName = splitStackArn[5].split("/")[1]
              paramName = props['Name']
              paramKeyId = props['KeyId']
              paramArn = "arn:aws:ssm:" + region + ":" + accountId + ":parameter/" + paramName
              if event['RequestType'] == 'Create':
                create_ssm_parameter(ssm, 'Create', props, paramName)
                send_response(event, context, "SUCCESS",
                {"Message": "Resource creation successful!", "Arn": paramArn})
              elif event['RequestType'] == 'Update':
                if props['Value'] and props['Value'].strip():
                  create_ssm_parameter(ssm, 'Update', props, paramName)
                send_response(event, context, "SUCCESS",
                {"Message": "Resource update successful!", "Arn": paramArn})
              elif event['RequestType'] == 'Delete':
                create_ssm_parameter(ssm, 'Delete', props, paramName)
                send_response(event, context, "SUCCESS",
                {"Message": "Resource deletion successful!", "Arn": paramArn})
              else:
                LOGGER.info('FAILED!')
                send_response(event, context, "FAILED",
                {"Message": "Unexpected event received from CloudFormation", "Arn": paramArn})
            except ssm.exceptions.ParameterNotFound:
              LOGGER.info('Parameter not found!')
              return "SUCCESS"
            except Exception as e: #pylint: disable=W0702
              LOGGER.info('FAILED, reason: %s', e)
              send_response(event, context, "FAILED", {
              "Message": "Exception during processing"})
          def retry(retry_count=5, delay=5, allowed_exceptions=()):
            def decorator(f):
                @functools.wraps(f)
                def wrapper(*args, **kwargs):
                    for _ in range(retry_count):
                      try:
                        result = f(*args, **kwargs)
                        if result: return result
                      except allowed_exceptions as e:
                        pass
                      LOGGER.info("wating for %s seconds before retrying again", delay)
                      sleep(delay)
                return wrapper
            return decorator
          @retry(retry_count=5, delay=10)
          def create_ssm_parameter(ssm, type_req, props, paramName):
            try:
              if type_req in ['Create', 'Update']:
                if type_req == 'Update':
                  props['Overwrite'] = True
                response = ssm.put_parameter(**props)
                LOGGER.info('CREATE or UPDATE')
                return "SUCCESS"
              elif type_req == 'Delete':
                response = ssm.delete_parameter(Name=paramName)
                LOGGER.info('DELETE!')
                return "SUCCESS"
            except ssm.exceptions.ClientError:
              LOGGER.info('SSM Client error, retrying...')
            except Exception as e: #pylint: disable=W0702
              LOGGER.info('FAILED, reason: %s', e)
          def send_response(event, context, response_status, response_data):
            response_body = json.dumps({
              "Status": response_status,
              "Reason": "See the details in CloudWatch Log: " + context.log_stream_name,
              "PhysicalResourceId": event['ResourceProperties']['Name'],
              "StackId": event['StackId'],
              "RequestId": event['RequestId'],
              "LogicalResourceId": event['LogicalResourceId'],
              "Data": response_data
            })
            LOGGER.info('ResponseURL: %s', event['ResponseURL'])
            LOGGER.info('ResponseBody: %s', response_body)
            request = urllib.request.Request(event['ResponseURL'])
            request.add_header('Content-Type', 'application/json; charset=utf-8')
            request.add_header('Content-Length', len(response_body.encode('utf-8')))
            request.get_method = lambda: 'PUT'
            response = urllib.request.urlopen(request,response_body.encode('utf-8'))
            LOGGER.info("Status code: %s", response.getcode())
            LOGGER.info("Status message: %s", response.msg)
          def timeout_handler(_signal, _frame):
            raise Exception('Time exceeded')
          signal.signal(signal.SIGALRM, timeout_handler)
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - kms:Encrypt
                Resource: "*"
Outputs:
  Lambda:
    Description: Cfn polyfill for SSM parameter store
    Value: !GetAtt Lambda.Arn
    Export:
      Name: ParamStoreHelper
  HelperRole:
    Description: IAM Role
    Value: !GetAtt Role.Arn
    Export:
      Name: SSMHelperRole